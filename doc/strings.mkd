
# Strings

## `c_strdup`

~~~ {.c}
    char *c_strdup(const char *string);
~~~

Returns a newly allocated string with the same content as `string` or `NULL`
if memory allocation fails.

## `c_strndup`

~~~ {.c}
    char *c_strndup(const char *string, size_t sz);
~~~

Returns a newly allocated string containing up to `sz` characters of `string`
or `NULL` if memory allocation fails.

## `c_memdup`

~~~ {.c}
    void *c_memdup(const void *ptr, size_t sz);
~~~

Returns a newly allocated chunk of memory containing up to `sz` bytes of `ptr`
or `NULL` if memory allocation fails.

## `c_vasprintf`

~~~ {.c}
    int c_vasprintf(char **pstring, const char *fmt, va_list ap);
~~~

Formats a character string in a newly allocated buffer using a `printf`-like
format string and a variable argument list, and store a pointer to the new
string in `pstring`. Returns the number of characters written on success, and
-1 if memory allocation or string formatting fails.

## `c_asprintf`

~~~ {.c}
    int c_asprintf(char **pstring, const char *fmt, ...);
~~~

Formats a character string in a newly allocated buffer using a `printf`-like
format string and a list of arguments, and store a pointer to the new string
in `pstring`. Returns the number of character written on success, and -1 if
memory allocation or string formatting fails.

## `c_strlcpy`

~~~ {.c}
    size_t c_strlcpy(char *dest, const char *string, size_t sz);
~~~

Copies up to `sz - 1` bytes of `string` to `dest`, ensuring that the
destination string ends with a null byte if `sz` is not 0. Returns the length
of `string`.

If the return value is greater or equal than `sz`, then `dest` does not
contain all the characters of `string`.

## `c_memory_search`

~~~ {.c}
    void *c_memory_search(const void *haystack, size_t haystack_sz,
                          const void *needle, size_t needle_sz);
~~~

Searches and returns a pointer on the first occurrence of `needle` in
`haystack` or `NULL` if `needle` is not in `haystack`. If `needle_sz` is zero,
`haystack` is returned.

## `c_memory_search_string`

~~~ {.c}
    char *c_memory_search_string(const void *haystack, size_t haystack_sz,
                                 const char *needle);
~~~

Searches and returns a pointer on the first occurrence of `needle` in
`haystack` or `NULL` if `needle` is not in `haystack`. If `needle` is an
empty string, `haystack` is returned.

## `c_string_search`

~~~ {.c}
    char *c_string_search(const char *haystack, const char *needle);
~~~

Searches and returns a pointer on the first occurrence of `needle` in
`haystack` or `NULL` if `needle` is not in `haystack`. If `needle` is an
empty string, `haystack` is returned.
