
# Unicode

In libcore, an "ustring" is an array of unicode codepoints. The last codepoint
in an ustring is always the `U+0000` codepoint.

## `c_codepoint_is_valid`
~~~ {.c}
    bool c_codepoint_is_valid(uint32_t codepoint);
~~~

Returns a boolean indicating whether a unicode codepoint is valid or not.

## `c_ustring_length`
~~~ {.c}
    size_t c_ustring_length(const uint32_t *ustring);
~~~

Returns the length of an ustring, i.e. the number of codepoints it contains.
The final `U+0000` codepoint is not included.

## `c_ustring_equal`
~~~ {.c}
    bool c_ustring_equal(const uint32_t *, const uint32_t *);
~~~

Returns `true` if two ustrings are equals, i.e. if all their codepoints are
the same, or `false` else.

## `c_utf8_read_codepoint`
~~~ {.c}
    int c_utf8_read_codepoint(const char *string, uint32_t *pcodepoint,
                              size_t *plength);
~~~

Reads a unicode codepoint from a string and stores it in `pcodepoint`. If
`plength` is not null, use it to return the length of the UTF-8 sequence read.

## `c_utf8_validate`
~~~ {.c}
    int c_utf8_validate(const char *string);
~~~

Returns 0 if a character string is a valid UTF-8 string, or -1 else.

## `c_utf8_nb_codepoints`
~~~ {.c}
    int c_utf8_nb_codepoints(const char *string, size_t *pcount);
~~~

Computes the number of codepoints in a string, and return it in `pcount`.
Returns 0 if the string is a valid UTF-8 string, or -1 else.

## `c_utf8_decode`
~~~ {.c}
    uint32_t *c_utf8_decode(const char *string);
~~~

Decodes an UTF-8 null-terminated string and returns an ustring.
Returns a null pointer if a decoding error occurs or if memory cannot be
allocated.
